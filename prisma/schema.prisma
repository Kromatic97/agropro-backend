datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Persona {
  id          Int          @id @default(autoincrement())
  nombre      String
  funcionario Funcionario?
  proveedor   Proveedor?
  egresos     Egreso[]     @relation("PersonaEgresos") // ← relación nombrada
}

model Funcionario {
  id      Int     @id
  persona Persona @relation(fields: [id], references: [id])
}

model Proveedor {
  id      Int     @id
  persona Persona @relation(fields: [id], references: [id])
}

model Entidad {
  id           Int           @id @default(autoincrement())
  nombre       String
  egresos      Egreso[]
  lanzamientos Lanzamiento[]
}

model Moneda {
  id      Int      @id @default(autoincrement())
  nombre  String
  egresos Egreso[]
}

model Condicion {
  id      Int      @id @default(autoincrement())
  nombre  String
  egresos Egreso[]
}

model TipoEgreso {
  id      Int      @id @default(autoincrement())
  nombre  String
  egresos Egreso[]
}

model Egreso {
  id          Int    @id @default(autoincrement())
  tipoPersona String // 'Proveedor' o 'Funcionario'
  personaId   Int

  entidadId    Int
  monedaId     Int
  condicionId  Int
  tipoEgresoId Int

  fecha       DateTime @default(now())
  monto       Float
  descripcion String

  persona        Persona         @relation("PersonaEgresos", fields: [personaId], references: [id])
  entidad        Entidad         @relation(fields: [entidadId], references: [id])
  moneda         Moneda          @relation(fields: [monedaId], references: [id])
  condicion      Condicion       @relation(fields: [condicionId], references: [id])
  tipoEgreso     TipoEgreso      @relation(fields: [tipoEgresoId], references: [id])
  lanzamientos   Lanzamiento[]
  detallesEgreso DetalleEgreso[]
}

model Lanzamiento {
  id        Int     @id @default(autoincrement())
  egresoId  Int
  entidadId Int
  egreso    Egreso  @relation(fields: [egresoId], references: [id])
  entidad   Entidad @relation(fields: [entidadId], references: [id])
}

model ObjetoGasto {
  id             Int             @id @default(autoincrement())
  tipo           String
  referenciaId   Int
  descripcion    String
  detalleEgresos DetalleEgreso[]
}


model Division {
  id             Int             @id @default(autoincrement())
  nombre         String
  detallesEgreso DetalleEgreso[]
}

model Iva {
  id             Int             @id @default(autoincrement())
  descripcion    String
  porcentaje     Float
  detallesEgreso DetalleEgreso[]
}

model DetalleEgreso {
  id             Int          @id @default(autoincrement())
  egresoId       Int
  divisionId     Int
  objetoGastoId  Int
  ivaId          Int
  descripcion    String
  cantidad       Float
  precioUnitario Float
  monto          Float

  egreso         Egreso       @relation(fields: [egresoId], references: [id])
  division       Division     @relation(fields: [divisionId], references: [id])
  objetoGasto    ObjetoGasto  @relation(fields: [objetoGastoId], references: [id])
  iva            Iva          @relation(fields: [ivaId], references: [id])
}

model Zafra {
  id                 Int                  @id @default(autoincrement())
  nombre             String

  distribuciones     DistribucionZafra[] // Relación inversa
}


model ParticipanteLanzamiento {
  id        Int    @id @default(autoincrement())
  codigo    String @unique // Ej: APS, ATS, PRPT, I, ANCP
  nombre    String

  distribuciones DistribucionZafra[]
}

model DistribucionZafra {
  id                 Int     @id @default(autoincrement())
  zafraId            Int
  participanteId     Int
  superficie         Float
  porcentaje         Float

  zafra           Zafra                  @relation(fields: [zafraId], references: [id])
  participante    ParticipanteLanzamiento @relation(fields: [participanteId], references: [id])

  @@unique([zafraId, participanteId], name: "zafraId_participanteId")
}

